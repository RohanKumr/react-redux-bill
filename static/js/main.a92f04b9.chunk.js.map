{"version":3,"sources":["App.js","actions/itemActions.js","actions/addItem.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["App","handleChange","event","setState","target","name","value","iDeletePosts","id","props","deleteItem","addItem","Date","valueOf","state","price","generateBill","items","length","total","map","item","parseInt","reduce","a","b","GSTPrice","GST","toFixed","grandTotal","alert","this","itemList","InputGroup","key","FormControl","onChange","placeholder","aria-label","aria-describedby","Append","Button","onClick","variant","className","type","Prepend","Text","React","Component","connect","dispatch","Boolean","window","location","hostname","match","initialState","store","createStore","action","console","log","addedItems","updatedItems","filter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a92f04b9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux'\nimport { deleteItem } from './actions/itemActions'\nimport { addItem } from './actions/addItem'\nimport Button from 'react-bootstrap/Button'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      price: '',\n      GST: 18,\n      GSTPrice: '',\n      total: '',\n      grandTotal: ''\n    }\n\n  }\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n  iDeletePosts = (id) => {\n    this.props.deleteItem(id)\n  }\n  addItem = () => this.props.addItem(Date().valueOf(), this.state.price, this.state.name)\n  generateBill = () => {\n    const { items } = this.props\n    if (items.length) {\n      let total = (items.map((item) => parseInt(item.price))\n        .reduce((a, b) => a + b))\n      let GSTPrice = parseInt(((total / 100) * this.state.GST).toFixed(3))\n      let grandTotal = parseInt(total) + parseInt(GSTPrice)\n      //console.log(total, percentage, grandTotal)\n      this.setState({\n        total,\n        GSTPrice,\n        grandTotal\n      })\n    } else {\n      alert(\"ADD SOME ITEMS\")\n    }\n  }\n  // editItem = (id) => {\n  //   this.props.editItem(id, this.state.price,this.)\n  // }\n  render() {\n    const { items } = this.props\n    const itemList = items.length ? (\n      items.map(item => {\n        return (<div>\n          <InputGroup key={item.id} >\n            <FormControl\n              onChange={this.handleChange}\n              name='name'\n              placeholder={item.name}\n              aria-label=\"Item\"\n              aria-describedby=\"basic-addon2\"\n            />\n            <FormControl\n\n              onChange={this.handleChange}\n              name='price'\n              placeholder={item.price}\n              aria-label=\"Price\"\n              aria-describedby=\"basic-addon2\"\n            />\n            <InputGroup.Append>\n              <Button onClick={() => { this.iDeletePosts(item.id) }} variant=\"outline-secondary\">Delete</Button>\n            </InputGroup.Append>\n          </InputGroup>\n          {/* <div className=\"item-card\" key={item.id}>\n            <div className=\"card-content\">\n              <span className=\"card- price red-text\"></span>\n              <button onClick={() => { this.iDeletePosts(item.id) }}> Delete</button>\n              <p>{item.name}</p>\n            </div>\n          </div > */}\n        </div>\n        )\n      })\n    ) : (\n        <div className=\"center\">No  items to show</div>\n      );\n    let total = 0\n    return (\n      <div >\n        <br />\n        <h4 className=\"center\">Bill Generation</h4>\n\n        <div className='bill-container'>\n          {/* LEFT CONTAINER */}\n          <div className='bill-left-container'>\n            <h3>Add New Item</h3>\n            <InputGroup>\n              <FormControl\n                onChange={this.handleChange}\n                name='name'\n                placeholder=\"Item\"\n                aria-label=\"Item\"\n                aria-describedby=\"basic-addon2\"\n              />\n              <FormControl\n                type=\"number\"\n                onChange={this.handleChange}\n                name='price'\n                placeholder=\"Price\"\n                aria-label=\"Price\"\n                aria-describedby=\"basic-addon2\"\n              />\n              <InputGroup.Append>\n                <Button onClick={this.addItem} variant=\"outline-secondary\">ADD NEW</Button>\n              </InputGroup.Append>\n            </InputGroup>\n\n            <hr />\n            {itemList} <hr />\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text>GST</InputGroup.Text>\n                <FormControl\n                  onChange={this.handleChange}\n                  name='GST'\n                  value={this.state.GST}\n                  placeholder=\"GST\"\n                  aria-label=\"GST\"\n                  aria-describedby=\"basic-addon2\" />\n                <InputGroup.Text>%</InputGroup.Text>\n              </InputGroup.Prepend>\n\n            </InputGroup>\n            <InputGroup>\n\n              <InputGroup.Append>\n                <Button onClick={this.generateBill} variant=\"outline-secondary\">Generate Bill</Button>\n              </InputGroup.Append>\n            </InputGroup>\n          </div>\n\n          {/* RIGHT CONTAINER */}\n          <div className='bill-right-container'>\n            <h3>Final Bill</h3>\n            {itemList}\n            <br />\n            <div className=\"space-between\">\n              <h6>Total: </h6>\n              <h6>{this.state.total}</h6>\n            </div>\n            <div className=\"space-between\">\n              <h6>GST:</h6>\n              <h6>{this.state.GSTPrice}</h6>\n            </div>\n            <div className=\"space-between\">\n              <h5>Grand Total:</h5>\n              <h5>{this.state.grandTotal}</h5>\n            </div>\n            <hr />\n          </div>\n        </div>\n      </div>\n    )\n\n  }\n}\n\nconst mapStatetoProps = (state) => {\n  return {\n    items: state.items\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    deleteItem: (id) => { dispatch(deleteItem(id)) },\n    addItem: (id, price, name) => { dispatch(addItem(id, price, name)) }\n  }\n}\n\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(App);\n","export const deleteItem = (id) => {\r\n    return {\r\n        type: 'DELETE_ITEM',\r\n        id\r\n    }\r\n}\r\n\r\n","export const addItem = (id, price, name) => {\r\n    return {\r\n        type: 'ADD_ITEM',\r\n        id,\r\n        price,\r\n        name\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    items: [\r\n        { id: 2, price: 40, name: \"Milk\" },\r\n        { id: 3, price: 10000, name: \"kindle\" },\r\n        { id: 4, price: 2500, name: \"Sunglasses\" }\r\n    ]\r\n}\r\n\r\nexport const rootReducer = (state = initialState, action) => {\r\n    // console.log(action.id)\r\n    if (action.type === \"ADD_ITEM\") {\r\n        console.log(action.id, action.name, action.price)\r\n        let addedItems = [\r\n            ...state.items,\r\n            { id: action.id, name: action.name, price: action.price }\r\n        ]\r\n        return {\r\n            ...state,\r\n            items: addedItems\r\n        }\r\n    }\r\n    if (action.type === \"DELETE_ITEM\") {\r\n\r\n        let updatedItems = state.items.filter(item => action.id != item.id)\r\n        return {\r\n            ...state,\r\n            items: updatedItems\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './reducers/rootReducer'\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <Provider store={store} >\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}